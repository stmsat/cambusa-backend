/*
 * cambusa-controller
 * Servizio per la tracciatura delle scadenze dei prodotti
 *
 * OpenAPI spec version: 0.0.4
 * Contact: stmsat@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CambusaController);
  }
}(this, function(expect, CambusaController) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CambusaController.CambusaControllerApi();
  });

  describe('(package)', function() {
    describe('CambusaControllerApi', function() {
      describe('deletePosizione', function() {
        it('should call deletePosizione successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePosizione call and complete the assertions
          /*

          instance.deletePosizione(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteProdotto', function() {
        it('should call deleteProdotto successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteProdotto call and complete the assertions
          /*

          instance.deleteProdotto(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTipo', function() {
        it('should call deleteTipo successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTipo call and complete the assertions
          /*

          instance.deleteTipo(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPosizione', function() {
        it('should call getPosizione successfully', function(done) {
          // TODO: uncomment, update parameter values for getPosizione call and complete the assertions
          /*

          instance.getPosizione(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CambusaController.Posizione);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPosizioni', function() {
        it('should call getPosizioni successfully', function(done) {
          // TODO: uncomment, update parameter values for getPosizioni call and complete the assertions
          /*
          var opts = {};

          instance.getPosizioni(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CambusaController.Posizione);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProdotti', function() {
        it('should call getProdotti successfully', function(done) {
          // TODO: uncomment, update parameter values for getProdotti call and complete the assertions
          /*
          var opts = {};

          instance.getProdotti(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CambusaController.Prodotto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProdotto', function() {
        it('should call getProdotto successfully', function(done) {
          // TODO: uncomment, update parameter values for getProdotto call and complete the assertions
          /*

          instance.getProdotto(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CambusaController.Prodotto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTipi', function() {
        it('should call getTipi successfully', function(done) {
          // TODO: uncomment, update parameter values for getTipi call and complete the assertions
          /*
          var opts = {};

          instance.getTipi(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CambusaController.Tipo);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTipo', function() {
        it('should call getTipo successfully', function(done) {
          // TODO: uncomment, update parameter values for getTipo call and complete the assertions
          /*

          instance.getTipo(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CambusaController.Tipo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchProdotto', function() {
        it('should call patchProdotto successfully', function(done) {
          // TODO: uncomment, update parameter values for patchProdotto call and complete the assertions
          /*
          var opts = {};

          instance.patchProdotto(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CambusaController.Prodotto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putPosizione', function() {
        it('should call putPosizione successfully', function(done) {
          // TODO: uncomment, update parameter values for putPosizione call and complete the assertions
          /*

          instance.putPosizione(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CambusaController.Posizione);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putProdotto', function() {
        it('should call putProdotto successfully', function(done) {
          // TODO: uncomment, update parameter values for putProdotto call and complete the assertions
          /*

          instance.putProdotto(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CambusaController.Prodotto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putTipo', function() {
        it('should call putTipo successfully', function(done) {
          // TODO: uncomment, update parameter values for putTipo call and complete the assertions
          /*

          instance.putTipo(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CambusaController.Tipo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
