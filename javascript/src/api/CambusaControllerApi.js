/*
 * cambusa-controller
 * Servizio per la tracciatura delle scadenze dei prodotti
 *
 * OpenAPI spec version: 0.0.4
 * Contact: stmsat@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Posizione} from '../model/Posizione';
import {Prodotto} from '../model/Prodotto';
import {Tipo} from '../model/Tipo';

/**
* CambusaController service.
* @module api/CambusaControllerApi
* @version 0.0.4
*/
export class CambusaControllerApi {

    /**
    * Constructs a new CambusaControllerApi. 
    * @alias module:api/CambusaControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deletePosizione operation.
     * @callback moduleapi/CambusaControllerApi~deletePosizioneCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Elimina una Posizione
     * @param {String} id 
     * @param {module:api/CambusaControllerApi~deletePosizioneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePosizione(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePosizione");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/cambusa/posizioni/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteProdotto operation.
     * @callback moduleapi/CambusaControllerApi~deleteProdottoCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Elimina un Prodotto
     * @param {String} id 
     * @param {module:api/CambusaControllerApi~deleteProdottoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteProdotto(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProdotto");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/cambusa/prodotti/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTipo operation.
     * @callback moduleapi/CambusaControllerApi~deleteTipoCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Elimina un Tipo
     * @param {String} id 
     * @param {module:api/CambusaControllerApi~deleteTipoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteTipo(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTipo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/cambusa/tipi/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPosizione operation.
     * @callback moduleapi/CambusaControllerApi~getPosizioneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Posizione{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Posizione per Id
     * @param {String} id 
     * @param {module:api/CambusaControllerApi~getPosizioneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPosizione(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPosizione");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Posizione;

      return this.apiClient.callApi(
        '/cambusa/posizioni/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPosizioni operation.
     * @callback moduleapi/CambusaControllerApi~getPosizioniCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Posizione>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista delle posizioni, ricercabile per nome e ordinabile
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Array.<String>} opts.sortby  (default to <.>)
     * @param {Array.<String>} opts.sortdirection  (default to <.>)
     * @param {module:api/CambusaControllerApi~getPosizioniCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPosizioni(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'name': opts['name'],'sortby': this.apiClient.buildCollectionParam(opts['sortby'], 'multi'),'sortdirection': this.apiClient.buildCollectionParam(opts['sortdirection'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Posizione];

      return this.apiClient.callApi(
        '/cambusa/posizioni', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProdotti operation.
     * @callback moduleapi/CambusaControllerApi~getProdottiCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Prodotto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista dei prodotti, ricercabile per vari parametri
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Date} opts.dataScadenzaLt 
     * @param {Date} opts.dataScadenzaGenerataLt 
     * @param {Date} opts.dataScadenzaGt 
     * @param {Date} opts.dataScadenzaGenerataGt 
     * @param {Array.<module:model/Tipo>} opts.tipo 
     * @param {Array.<module:model/Posizione>} opts.posizione 
     * @param {Array.<String>} opts.sortby  (default to <.>)
     * @param {Array.<String>} opts.sortdirection  (default to <.>)
     * @param {module:api/CambusaControllerApi~getProdottiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProdotti(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'name': opts['name'],'dataScadenzaLt': opts['dataScadenzaLt'],'dataScadenzaGenerataLt': opts['dataScadenzaGenerataLt'],'dataScadenzaGt': opts['dataScadenzaGt'],'dataScadenzaGenerataGt': opts['dataScadenzaGenerataGt'],'tipo': this.apiClient.buildCollectionParam(opts['tipo'], 'multi'),'posizione': this.apiClient.buildCollectionParam(opts['posizione'], 'multi'),'sortby': this.apiClient.buildCollectionParam(opts['sortby'], 'multi'),'sortdirection': this.apiClient.buildCollectionParam(opts['sortdirection'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Prodotto];

      return this.apiClient.callApi(
        '/cambusa/prodotti', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProdotto operation.
     * @callback moduleapi/CambusaControllerApi~getProdottoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prodotto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prodotto per Id
     * @param {String} id 
     * @param {module:api/CambusaControllerApi~getProdottoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProdotto(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProdotto");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Prodotto;

      return this.apiClient.callApi(
        '/cambusa/prodotti/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTipi operation.
     * @callback moduleapi/CambusaControllerApi~getTipiCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tipo>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista dei tipi, ricercabile per nome e ordinabile
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Array.<String>} opts.sortby  (default to <.>)
     * @param {Array.<String>} opts.sortdirection  (default to <.>)
     * @param {module:api/CambusaControllerApi~getTipiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTipi(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'name': opts['name'],'sortby': this.apiClient.buildCollectionParam(opts['sortby'], 'multi'),'sortdirection': this.apiClient.buildCollectionParam(opts['sortdirection'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tipo];

      return this.apiClient.callApi(
        '/cambusa/tipi', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTipo operation.
     * @callback moduleapi/CambusaControllerApi~getTipoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tipo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tipo per Id
     * @param {String} id 
     * @param {module:api/CambusaControllerApi~getTipoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTipo(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTipo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tipo;

      return this.apiClient.callApi(
        '/cambusa/tipi/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchProdotto operation.
     * @callback moduleapi/CambusaControllerApi~patchProdottoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prodotto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggiorna singoli campi di un Prodotto
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.aperto 
     * @param {Date} opts.dataApertura 
     * @param {Number} opts.quantita 
     * @param {module:api/CambusaControllerApi~patchProdottoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchProdotto(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchProdotto");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'aperto': opts['aperto'],'dataApertura': opts['dataApertura'],'quantita': opts['quantita']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Prodotto;

      return this.apiClient.callApi(
        '/cambusa/prodotti/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putPosizione operation.
     * @callback moduleapi/CambusaControllerApi~putPosizioneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Posizione{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Salva una Posizione (insert o update)
     * @param {module:model/Posizione} body 
     * @param {module:api/CambusaControllerApi~putPosizioneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putPosizione(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPosizione");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Posizione;

      return this.apiClient.callApi(
        '/cambusa/posizioni', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putProdotto operation.
     * @callback moduleapi/CambusaControllerApi~putProdottoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prodotto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Salva un Prodotto (insert o update)
     * @param {module:model/Prodotto} body 
     * @param {module:api/CambusaControllerApi~putProdottoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putProdotto(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProdotto");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prodotto;

      return this.apiClient.callApi(
        '/cambusa/prodotti', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putTipo operation.
     * @callback moduleapi/CambusaControllerApi~putTipoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tipo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Salva un Tipo (insert o update)
     * @param {module:model/Tipo} body 
     * @param {module:api/CambusaControllerApi~putTipoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putTipo(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTipo");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tipo;

      return this.apiClient.callApi(
        '/cambusa/tipi', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}